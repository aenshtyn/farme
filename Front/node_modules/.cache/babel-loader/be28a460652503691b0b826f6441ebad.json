{"remainingRequest":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/babel-loader/lib/index.js!/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/src/components/Charts/Chart3.vue?vue&type=template&id=59d7f0a2&scoped=true","dependencies":[{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/src/components/Charts/Chart3.vue","mtime":1655986402779},{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/babel.config.js","mtime":1647800954734},{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aFNjb3BlSWQgPSBmdW5jdGlvbiBfd2l0aFNjb3BlSWQobikgewogIHJldHVybiBfcHVzaFNjb3BlSWQoImRhdGEtdi01OWQ3ZjBhMiIpLCBuID0gbigpLCBfcG9wU2NvcGVJZCgpLCBuOwp9OwoKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJsaW5lQ2hhcnQiCn07CnZhciBfaG9pc3RlZF8yID0gewogIGNsYXNzOiAiY2hhcnRBbmRCdXR0b25zQ29udGFpbmVyIgp9Owp2YXIgX2hvaXN0ZWRfMyA9IHsKICBjbGFzczogImRhdGVSYW5nZUJ1dHRvbnMiCn07Cgp2YXIgX2hvaXN0ZWRfNCA9IC8qI19fUFVSRV9fKi9fd2l0aFNjb3BlSWQoZnVuY3Rpb24gKCkgewogIHJldHVybiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgewogICAgaWQ6ICJjaGFydENvbnRhaW5lciIKICB9LCBbLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImNhbnZhcyIsIHsKICAgIGlkOiAibXlDaGFydCIsCiAgICB3aWR0aDogIjQwMHB4IiwKICAgIGhlaWdodDogIjQwMHB4IgogIH0pXSwgLTEKICAvKiBIT0lTVEVEICovCiAgKTsKfSk7CgpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMywgW19jcmVhdGVFbGVtZW50Vk5vZGUoImJ1dHRvbiIsIHsKICAgIGNsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IiwKICAgIG9uQ2xpY2s6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJHNldHVwLmNyZWF0ZU1pbGtQcm9kdWN0aW9uQ2hhcnRJblNwZWNpZmllZERhdGVIaXN0b3J5UmFuZ2VTRVRVUCgyNjMwMDAwKTsKICAgIH0pCiAgfSwgIiAxIG1vbnRoICIpLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgICBjbGFzczogImJ0biBidG4tcHJpbWFyeSIsCiAgICBvbkNsaWNrOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRzZXR1cC5jcmVhdGVNaWxrUHJvZHVjdGlvbkNoYXJ0SW5TcGVjaWZpZWREYXRlSGlzdG9yeVJhbmdlU0VUVVAoMzE1MzYwMDApOwogICAgfSkKICB9LCAiIDEgeWVhciAiKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnV0dG9uIiwgewogICAgY2xhc3M6ICJidG4gYnRuLXByaW1hcnkiLAogICAgb25DbGljazogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkc2V0dXAuY3JlYXRlTWlsa1Byb2R1Y3Rpb25DaGFydEluU3BlY2lmaWVkRGF0ZUhpc3RvcnlSYW5nZVNFVFVQKDE1NzY4MDAwMCk7CiAgICB9KQogIH0sICIgNSB5ZWFycyAiKV0pLCBfaG9pc3RlZF80XSldKTsKfQ=="},{"version":3,"mappings":";;;;;;;AACOA,OAAK,EAAC;;;AACJA,OAAK,EAAC;;;AACJA,OAAK,EAAC;;;;sBA2BXC,oBAEM,KAFN,EAEM;AAFDC,MAAE,EAAC;AAEF,GAFN,EAAwB,cACtBD,oBAA2D,QAA3D,EAA2D;AAAnDC,MAAE,EAAC,SAAgD;AAAtCC,SAAK,EAAC,OAAgC;AAAxBC,UAAM,EAAC;AAAiB,GAA3D,CADsB,CAAxB;;AAAA;;;;uBA7BJC,oBAiCM,KAjCN,cAiCM,CAhCJJ,oBA+BM,KA/BN,cA+BM,CA9BJA,oBAyBM,KAzBN,cAyBM,CAxBJA,oBAOS,QAPT,EAOS;AANPD,SAAK,EAAC,iBAMC;AALNM,WAAK;AAAA,aAAeC,iEAAyD,OAAzD,CAAf;AAAA;AAKC,GAPT,EAKC,WALD,CAwBI,EAhBJN,oBAOS,QAPT,EAOS;AANPD,SAAK,EAAC,iBAMC;AALNM,WAAK;AAAA,aAAeC,iEAAyD,QAAzD,CAAf;AAAA;AAKC,GAPT,EAKC,UALD,CAgBI,EARJN,oBAOS,QAPT,EAOS;AANPD,SAAK,EAAC,iBAMC;AALNM,WAAK;AAAA,aAAeC,iEAAyD,SAAzD,CAAf;AAAA;AAKC,GAPT,EAKC,WALD,CAQI,CAzBN,CA8BI,EAHJC,UAGI,CA/BN,CAgCI,CAjCN","names":["class","_createElementVNode","id","width","height","_createElementBlock","onClick","$setup","_hoisted_4"],"sourceRoot":"","sources":["/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/src/components/Charts/Chart3.vue"],"sourcesContent":["<template>\n  <div class=\"lineChart\">\n    <div class=\"chartAndButtonsContainer\">\n      <div class=\"dateRangeButtons\">\n        <button\n          class=\"btn btn-primary\"\n          @click=\"\n            createMilkProductionChartInSpecifiedDateHistoryRangeSETUP(2630000)\n          \"\n        >\n          1 month\n        </button>\n        <button\n          class=\"btn btn-primary\"\n          @click=\"\n            createMilkProductionChartInSpecifiedDateHistoryRangeSETUP(31536000)\n          \"\n        >\n          1 year\n        </button>\n        <button\n          class=\"btn btn-primary\"\n          @click=\"\n            createMilkProductionChartInSpecifiedDateHistoryRangeSETUP(157680000)\n          \"\n        >\n          5 years\n        </button>\n      </div>\n\n      <div id=\"chartContainer\">\n        <canvas id=\"myChart\" width=\"400px\" height=\"400px\"></canvas>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed } from \"vue\";\nimport Chart from \"chart.js/auto\";\nimport axios from \"axios\";\nlet milkProductionHistory = [];\nlet milkProductionHistoryDates = [];\nlet myChart;\nmyChart;\nexport default {\n  name: \"LineChart\",\n  mounted() {\n    // beginning of stock API code\n    let cowName = \"1\";\n    let FarmAPI_URL_Link = `http://localhost:4000/api/milks/${cowName}`;\n    let createMilkProductionChartInSpecifiedDateHistoryRange = (dateRange) => {\n      axios\n        .get(FarmAPI_URL_Link)\n        .then((response) => {\n          milkProductionHistory = response;\n          for (const property in milkProductionHistory.data[\n            \"Monthly Adjusted Time Series\"\n          ]) {\n            let closingPrice =\n              milkProductionHistory.data[\"Monthly Adjusted Time Series\"][\n                property\n              ][\"4. close\"];\n            let closingDateMonth = property.split(\"-\")[1];\n            let closingDateYear = property.split(\"-\")[0];\n            let closingDateDay = property.split(\"-\")[2];\n            let closingDateProperlyFormatted = `${closingDateMonth}/${closingDateDay}/${closingDateYear}`;\n            let closingDateEpochTime =\n              Date.parse(closingDateProperlyFormatted) / 1000;\n            dateRange;\n            closingDateProperlyFormatted;\n            closingPrice;\n            // closingDateEpochTime\n            milkProductionHistoryDates.unshift(closingDateProperlyFormatted);\n            // milkProductionHistoryEpochDates.unshift(closingDateEpochTime)\n            // milkProductionHistoryPrices.unshift(closingPrice)\n          }\n        })\n        .then(() => {\n          let now = Date.now() / 1000;\n          let dateRangeDate = now - dateRange;\n          const isLaterDateThanDateRangeDate = (date) => {\n            return date > dateRangeDate;\n          };\n\n          let arrayIndexWhereDateIsLargerThanDateRangeDate =\n            milkProductionHistoryEpochDates.findIndex(\n              isLaterDateThanDateRangeDate\n            );\n          milkProductionHistoryDates.splice(\n            0,\n            arrayIndexWhereDateIsLargerThanDateRangeDate\n          );\n          milkProductionHistoryPrices.splice(\n            0,\n            arrayIndexWhereDateIsLargerThanDateRangeDate\n          );\n          this.updateMilkProductionChart();\n        });\n    };\n    // end of stock API code\n    createMilkProductionChartInSpecifiedDateHistoryRange(\n      23456345634563463465436\n    );\n  },\n  setup() {\n    let updateMilkProductionChart = () => {\n      // beginning of line chart code //\n      const ctx = document.getElementById(\"myChart\");\n      const labels = milkProductionHistoryDates;\n      const data = {\n        labels: labels,\n        datasets: [\n          {\n            label: \"My First Dataset\",\n            data: milkProductionHistoryPrices,\n            fill: false,\n            borderColor: \"rgb(75, 192, 192)\",\n            tension: 0,\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n            },\n          },\n        ],\n      };\n      let myChart = null;\n\n      const chartWithKey = Chart.getChart(\"myChart\");\n      if (chartWithKey != undefined) {\n        chartWithKey.destroy();\n      }\n      myChart = new Chart(ctx, {\n        type: \"line\",\n        data: data,\n      });\n      myChart;\n    };\n    // beginning of stock API code\n    let cowName = ref(\"1\");\n    let AlphaVantangeAPI_URL_Link = computed(\n      () => \"http://localhost:4000/api/milks/${cowName} + cowName\"\n    );\n    let createMilkProductionChartInSpecifiedDateHistoryRangeSETUP = (\n      dateRange\n    ) => {\n      console.log(\"selected stock symbol: \" + cowName.value);\n      // empty array if something already in there\n      if (milkProductionHistoryDates.length > 0) {\n        milkProductionHistoryDates = [];\n        milkProductionHistoryEpochDates = [];\n        milkProductionHistoryVolumes = [];\n      }\n      console.log(AlphaVantangeAPI_URL_Link.value);\n      axios\n        .get(AlphaVantangeAPI_URL_Link.value)\n        .then((response) => {\n          milkProductionHistory = response;\n          for (const property in milkProductionHistory.data[\n            \"Monthly Adjusted Time Series\"\n          ]) {\n            let closingPrice =\n              milkProductionHistory.data[\"Monthly Adjusted Time Series\"][\n                property\n              ][\"4. close\"];\n            let closingDateMonth = property.split(\"-\")[1];\n            let closingDateYear = property.split(\"-\")[0];\n            let closingDateDay = property.split(\"-\")[2];\n            let closingDateProperlyFormatted = `${closingDateMonth}/${closingDateDay}/${closingDateYear}`;\n            let closingDateEpochTime =\n              Date.parse(closingDateProperlyFormatted) / 1000;\n            dateRange;\n            closingDateProperlyFormatted;\n            closingPrice;\n            closingDateEpochTime;\n            milkProductionHistoryDates.unshift(closingDateProperlyFormatted);\n            milkProductionHistoryEpochDates.unshift(closingDateEpochTime);\n            milkProductionHistoryPrices.unshift(closingPrice);\n          }\n        })\n        .then(() => {\n          console.log(dateRange);\n          let now = Date.now() / 1000;\n          console.log(\"Now: \" + now + \"\\n5 years ago: \" + (now - dateRange));\n          let dateRangeDate = now - dateRange;\n          console.log(\"dateRangeDate: \" + dateRangeDate);\n          const isLaterDateThanDateRangeDate = (date) => {\n            return date > dateRangeDate;\n          };\n          let arrayIndexWhereDateIsLargerThanDateRangeDate =\n            milkProductionHistoryEpochDates.findIndex(\n              isLaterDateThanDateRangeDate\n            );\n          console.log(arrayIndexWhereDateIsLargerThanDateRangeDate);\n          milkProductionHistoryDates.splice(\n            0,\n            arrayIndexWhereDateIsLargerThanDateRangeDate\n          );\n          milkProductionHistoryPrices.splice(\n            0,\n            arrayIndexWhereDateIsLargerThanDateRangeDate\n          );\n          console.log(milkProductionHistoryDates);\n          updateMilkProductionChart();\n          console.log(\"In setup\");\n          console.log(\"In setup: \" + myChart);\n          console.log(window.myChart);\n        });\n    };\n    // end of stock API code\n    return {\n      createMilkProductionChartInSpecifiedDateHistoryRangeSETUP,\n      updateMilkProductionChart,\n      cowName,\n      AlphaVantangeAPI_URL_Link,\n    };\n  },\n};\n</script>\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n/* #chartContainer {\n  width: 100px;\n  height: 30px;\n  margin: 0 auto;\n}\n#cowNameSearchBar {\n  padding: 10px;\n}\n#cowNameSearchForm .submit {\n  padding: 10px 20px;\n}\n.dateRangeButtons button {\n  padding: 10px 20px;\n  margin: 2px;\n} */\n</style>\n"]}]}