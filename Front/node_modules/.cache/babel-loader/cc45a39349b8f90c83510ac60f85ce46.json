{"remainingRequest":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/babel-loader/lib/index.js!/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/eslint-loader/index.js??ref--14-0!/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/src/services/PatronDataService.js","dependencies":[{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/src/services/PatronDataService.js","mtime":1656575516887},{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/babel.config.js","mtime":1647800954734},{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9hZW5zaHR5bi9EZXNrdG9wL0NvZGUvUGVyc29uYWwvUHJvamVjdHMvZmFybS9Gcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IGFwaSBmcm9tICIuL2FwaSI7CmltcG9ydCB7IHJlZiB9IGZyb20gInZ1ZSI7CmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gInZ1ZS1yb3V0ZXIiOwpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VQYXRyb25zKCkgewogIHZhciBwYXRyb24gPSByZWYoW10pOwogIHZhciBwYXRyb25zID0gcmVmKFtdKTsKICB2YXIgZXJyb3JzID0gcmVmKCIiKTsKICB2YXIgcm91dGVyID0gdXNlUm91dGVyKCk7CgogIHZhciBnZXRQYXRyb25zID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gYXBpLmdldCgiL3BhdHJvbnMiKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgcGF0cm9ucy52YWx1ZSA9IHJlc3BvbnNlLmRhdGEuZGF0YTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIGdldFBhdHJvbnMoKSB7CiAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0oKTsKCiAgdmFyIGdldFBhdHJvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGlkKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGFwaS5nZXQoIi9wYXRyb25zLyIgKyBpZCk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBwYXRyb24udmFsdWUgPSByZXNwb25zZS5kYXRhLmRhdGE7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIGdldFBhdHJvbihfeCkgewogICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICB2YXIgc3RvcmVQYXRyb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWYzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhkYXRhKSB7CiAgICAgIHZhciBrZXk7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgZXJyb3JzLnZhbHVlID0gIiI7CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAxOwogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gYXBpLnBvc3QoIi9wYXRyb25zIiwgZGF0YSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA2OwogICAgICAgICAgICAgIHJldHVybiByb3V0ZXIucHVzaCh7CiAgICAgICAgICAgICAgICBuYW1lOiAicGF0cm9ucy5pbmRleCIKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDExOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gODsKICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMSk7CgogICAgICAgICAgICAgIGlmIChfY29udGV4dDMudDAucmVzcG9uc2Uuc3RhdHVzID09PSA0MjIpIHsKICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIF9jb250ZXh0My50MC5yZXNwb25zZS5kYXRhLmVycm9ycykgewogICAgICAgICAgICAgICAgICBlcnJvcnMudmFsdWUgKz0gX2NvbnRleHQzLnQwLnJlc3BvbnNlLmRhdGEuZXJyb3JzW2tleV1bMF0gKyAiICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzLCBudWxsLCBbWzEsIDhdXSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIHN0b3JlUGF0cm9uKF94MikgewogICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICB2YXIgdXBkYXRlUGF0cm9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmNCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoaWQpIHsKICAgICAgdmFyIGtleTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBlcnJvcnMudmFsdWUgPSAiIjsKICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDE7CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBhcGkucGF0Y2goIi9wYXRyb25zLyIgKyBpZCwgcGF0cm9uLnZhbHVlKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgICAgIG5hbWU6ICJwYXRyb25zLmluZGV4IgogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSA4OwogICAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NFsiY2F0Y2giXSgxKTsKCiAgICAgICAgICAgICAgaWYgKF9jb250ZXh0NC50MC5yZXNwb25zZS5zdGF0dXMgPT09IDQyMikgewogICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gX2NvbnRleHQ0LnQwLnJlc3BvbnNlLmRhdGEuZXJyb3JzKSB7CiAgICAgICAgICAgICAgICAgIGVycm9ycy52YWx1ZSArPSBfY29udGV4dDQudDAucmVzcG9uc2UuZGF0YS5lcnJvcnNba2V5XVswXSArICIgIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMSwgOF1dKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlUGF0cm9uKF94MykgewogICAgICByZXR1cm4gX3JlZjQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICB2YXIgZGVzdHJveVBhdHJvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZjUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KGlkKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBhcGkuZGVsZXRlKCcvcGF0cm9ucy8nICsgaWQpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTUpOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiBkZXN0cm95UGF0cm9uKF94NCkgewogICAgICByZXR1cm4gX3JlZjUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICByZXR1cm4gewogICAgZXJyb3JzOiBlcnJvcnMsCiAgICBwYXRyb246IHBhdHJvbiwKICAgIHBhdHJvbnM6IHBhdHJvbnMsCiAgICBnZXRQYXRyb246IGdldFBhdHJvbiwKICAgIGdldFBhdHJvbnM6IGdldFBhdHJvbnMsCiAgICBzdG9yZVBhdHJvbjogc3RvcmVQYXRyb24sCiAgICB1cGRhdGVQYXRyb246IHVwZGF0ZVBhdHJvbiwKICAgIGRlc3Ryb3lQYXRyb246IGRlc3Ryb3lQYXRyb24KICB9Owp9"},{"version":3,"sources":["/Users/aenshtyn/Desktop/Code/Personal/Projects/farm/Front/src/services/PatronDataService.js"],"names":["api","ref","useRouter","usePatrons","patron","patrons","errors","router","getPatrons","get","response","value","data","getPatron","id","storePatron","post","push","name","status","key","updatePatron","patch","destroyPatron","delete"],"mappings":"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","sourcesContent":["import api from \"./api\";\nimport { ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\n\nexport default function usePatrons() {\n    const patron = ref([]);\n    const patrons = ref([]);\n\n    const errors = ref(\"\");\n    const router = useRouter();\n\n    const getPatrons = async() => {\n        let response = await api.get(\"/patrons\");\n        patrons.value = response.data.data;\n    };\n\n    const getPatron = async(id) => {\n        let response = await api.get(`/patrons/` + id);\n        patron.value = response.data.data;\n    };\n\n    const storePatron = async(data) => {\n        errors.value = \"\";\n        try {\n            await api.post(\"/patrons\", data);\n            await router.push({ name: \"patrons.index\" });\n        } catch (e) {\n            if (e.response.status === 422) {\n                for (const key in e.response.data.errors) {\n                    errors.value += e.response.data.errors[key][0] + \" \";\n                }\n            }\n        }\n    };\n\n    const updatePatron = async(id) => {\n        errors.value = \"\";\n        try {\n            await api.patch(\"/patrons/\" + id, patron.value);\n            await router.push({ name: \"patrons.index\" });\n        } catch (e) {\n            if (e.response.status === 422) {\n                for (const key in e.response.data.errors) {\n                    errors.value += e.response.data.errors[key][0] + \" \";\n                }\n            }\n        }\n    };\n    const destroyPatron = async(id) => {\n        await api.delete('/patrons/' + id);\n    };\n\n    return {\n        errors,\n        patron,\n        patrons,\n        getPatron,\n        getPatrons,\n        storePatron,\n        updatePatron,\n        destroyPatron,\n    };\n}"]}]}